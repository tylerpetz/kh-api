components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        username: fake name
        role: user

    List:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        public:
          type: boolean
      example:
        id: 5ebac534954b54139806c112
        name: fake name
        description: all the stuff that I want
        public: true

    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        public:
          type: boolean
        owned:
          type: boolean
        qty:
          type: number
        price:
          type: number
        photos:
          type: array
          items:
            type: string
        urls:
          type: array
          items:
            type: string
        details:
          type: object
          properties:
            maker:
              type: string
            model:
              type: string
            color:
              type: string
        lists:
          type: array
          items:
            type: string
        order:
          type: string
        user:
          type: string
      example:
        id: 5ebac534954b54139806c112
        name: TOFU60
        description: black case
        owned: true
        public: true
        qty: 1
        price: 9999
        photos: [https://via.placeholder.com/150, https://via.placeholder.com/250]
        urls: [https://geekhack.org, https://reddit.com/r/mechmarket]
        lists: [listId1, listId2]
        order: orderId
        user: userId

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
